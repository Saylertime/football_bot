from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery

from keyboards.reply.create_markup import create_markup
from states.overall import OverallState
from utils.calend import MONTHS_GENITIVE
from pg_maker import (all_games, find_players_without_game, find_players_in_game,
                      register_player_in_game, unregister_player_from_game,
                      add_goal, add_assist, add_autogoal, results_of_the_game,
                      delete_game, remove_goal, remove_assist, remove_autogoal,
                      find_players_with_something, add_points, add_overall_pts)


router_all_games = Router()


@router_all_games.message(Command("games"))
@router_all_games.callback_query(F.data == "games")
async def games_func(message, state):
    if isinstance(message, CallbackQuery):
        message = message.message
    buttons = [
        ("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞", "add_game"),
        ("üçø –í—Å–µ –∏–≥—Ä—ã", "all_games"),
    ]
    markup = create_markup(buttons)
    await message.edit_text("–ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("all_games"))
async def all_games_func(callback, state):
    games = await all_games()
    buttons = []
    for game in games:
        dt = game["played_at"]
        label = f"{dt.day:02d} {MONTHS_GENITIVE[dt.month]} {dt.year}"
        buttons.append((label, f"games__{game['id']}__{label}"))
    buttons.append(("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "start"))
    markup = create_markup(buttons, columns=3)
    await callback.message.edit_text("–í—Å–µ –∏–≥—Ä—ã", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("games__"))
async def one_game(callback):
    game_id = callback.data.split("__")[1]
    played_at = callback.data.split("__")[2]
    buttons = [
        ("‚öΩ –ì–æ–ª", f"add_goal__{game_id}__{played_at}"),
        ("ü§ù –ê—Å—Å–∏—Å—Ç", f"add_assist__{game_id}__{played_at}"),
        ("ü§° –ê–≤—Ç–æ–≥–æ–ª", f"add_autogoal__{game_id}__{played_at}"),
        ("üö´‚öΩ –û—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª—ã", f"remove_goal__{game_id}__{played_at}"),
        ("üö´ü§ù –û—Ç–º–µ–Ω–∏—Ç—å –∞—Å—Å–∏—Å—Ç—ã", f"remove_assist__{game_id}__{played_at}"),
        ("üö´ü§° –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–≥–æ–ª", f"remove_autogoal__{game_id}__{played_at}"),
        ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", f"results__{game_id}__{played_at}"),
        ("üÜï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", f"insert_player__{game_id}__{played_at}"),
        ("‚ùå –£–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞", f"remove_player__{game_id}__{played_at}"),
        ("3Ô∏è‚É£ +3 –æ—á–∫–∞ –∏–≥—Ä–æ–∫—É", f"point_player__{game_id}__{played_at}__3"),
        ("1Ô∏è‚É£ +1 –æ—á–∫–æ –∏–≥—Ä–æ–∫—É", f"point_player__{game_id}__{played_at}__1"),
        ("üî¢ + PTS", f"more_points_player__{game_id}__{played_at}"),
        ("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É", f"game_delete__{game_id}__{played_at}"),
        ("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "start"),
    ]
    markup = create_markup(buttons, columns=2)
    await callback.message.edit_text(f"–ò–≥—Ä–∞ {played_at}", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("insert_player__"))
async def insert_player_func(callback):
    game_id = callback.data.split("__")[1]
    played_at = callback.data.split("__")[2]
    players_without_game = await find_players_without_game(int(game_id))
    buttons = [
        (player["name"], f"add__{str(player['id'])}__{game_id}__{played_at}") for player in players_without_game
    ]
    buttons.append(("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}"))
    markup = create_markup(buttons, columns=2)
    await callback.message.edit_text("–ò–≥—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ —ç—Ç–æ–π –∏–≥—Ä–µ:", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("add__"))
async def add_player_func(callback):
    player_id = int(callback.data.split("__")[1])
    game_id = int(callback.data.split("__")[2])
    played_at = callback.data.split("__")[3]
    await register_player_in_game(game_id, player_id)
    buttons = [("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}")]
    markup = create_markup(buttons)
    await callback.message.edit_text("–ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("remove_player__"))
async def remove_player_func(callback):
    game_id = callback.data.split("__")[1]
    played_at = callback.data.split("__")[2]
    players_in_game = await find_players_in_game(int(game_id))
    buttons = [
        (player["name"], f"remove__{str(player['id'])}__{game_id}__{played_at}") for player in players_in_game
    ]
    markup = create_markup(buttons, columns=2)
    await callback.message.edit_text("–ò–≥—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∞–Ω—ã –Ω–∞ –∏–≥—Ä—É:", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("remove__"))
async def delete_player_func(callback):
    player_id = int(callback.data.split("__")[1])
    game_id = int(callback.data.split("__")[2])
    played_at = callback.data.split("__")[3]

    await unregister_player_from_game(game_id, player_id)
    buttons = [("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}")]
    markup = create_markup(buttons)
    await callback.message.edit_text("–ò–≥—Ä–æ–∫ —É–¥–∞–ª—ë–Ω –∏–∑ –∏–≥—Ä—ã", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("add_goal__"))
async def add_goal_func(callback):
    game_id = int(callback.data.split("__")[1])
    played_at = callback.data.split("__")[2]
    players_in_game = await find_players_in_game(int(game_id))
    buttons = [
        (player["name"], f"goal__{str(player['id'])}__{game_id}__{played_at}") for player in players_in_game
    ]
    buttons.append(("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}"))
    markup = create_markup(buttons, columns=2)
    await callback.message.edit_text("–ö—Ç–æ –∑–∞–±–∏–ª?", reply_markup=markup)


#################

@router_all_games.callback_query(F.data.startswith("goal__"))
async def goal_func(callback):
    player_id = int(callback.data.split("__")[1])
    game_id = int(callback.data.split("__")[2])
    played_at = callback.data.split("__")[3]
    buttons = [(str(points), f"add_few_goals__{str(player_id)}__{game_id}__{played_at}__{str(points)}") for points in
               range(21)]
    markup = create_markup(buttons, 4)
    await callback.message.edit_text("–°–∫–æ–ª—å–∫–æ –Ω–∞–∫–ª–µ–ø–∞–ª –∑–∞ –∏–≥—Ä—É?", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("add_few_goals__"))
async def few_goals_func(callback):
    player_id = int(callback.data.split("__")[1])
    game_id = int(callback.data.split("__")[2])
    played_at = callback.data.split("__")[3]
    points = int(callback.data.split("__")[4])
    await add_goal(game_id, player_id, points)
    buttons = [("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}")]
    markup = create_markup(buttons)
    await callback.message.edit_text("–ö—Ä–∞—Å–∏–≤–æ –¥–µ–ª–∞–µ—Ç!", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("remove_goal__"))
async def remove_goal_func(callback):
    game_id = int(callback.data.split("__")[1])
    played_at = callback.data.split("__")[2]
    players_in_game = await find_players_with_something(int(game_id), something="goals")
    buttons = [
        (player["name"], f"ungoal__{str(player['id'])}__{game_id}__{played_at}") for player in players_in_game
    ]
    buttons.append(("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}"))
    markup = create_markup(buttons, columns=2)
    await callback.message.edit_text("–ö–æ–≥–æ –æ—Ç–º–µ–Ω—è–µ–º?", reply_markup=markup)

@router_all_games.callback_query(F.data.startswith("ungoal__"))
async def remove_goal_func(callback):
    player_id = int(callback.data.split("__")[1])
    game_id = int(callback.data.split("__")[2])
    played_at = callback.data.split("__")[3]
    await remove_goal(game_id, player_id)
    buttons = [("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}")]
    markup = create_markup(buttons)
    await callback.message.edit_text("–ì–∞–ª—è, –æ—Ç–º–µ–Ω–∞", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("add_assist__"))
async def add_assist_func(callback):
    game_id = int(callback.data.split("__")[1])
    played_at = callback.data.split("__")[2]
    players_in_game = await find_players_in_game(int(game_id))
    buttons = [
        (player["name"], f"assist__{str(player['id'])}__{game_id}__{played_at}") for player in players_in_game
    ]
    buttons.append(("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}"))
    markup = create_markup(buttons, columns=2)
    await callback.message.edit_text("–ö—Ç–æ —Å–¥–µ–ª–∞–ª –∞—Å—Å–∏—Å—Ç?", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("assist__"))
async def assist_func(callback):
    player_id = int(callback.data.split("__")[1])
    game_id = int(callback.data.split("__")[2])
    played_at = callback.data.split("__")[3]
    buttons = [(str(points), f"add_few_assists__{str(player_id)}__{game_id}__{played_at}__{str(points)}") for points in
               range(21)]
    markup = create_markup(buttons, 4)
    await callback.message.edit_text("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–∞–ª –ø–∞—Å–æ–≤?", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("add_few_assists__"))
async def few_assist_func(callback):
    player_id = int(callback.data.split("__")[1])
    game_id = int(callback.data.split("__")[2])
    played_at = callback.data.split("__")[3]
    points = int(callback.data.split("__")[4])
    await add_assist(game_id, player_id, points)
    buttons = [("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}")]
    markup = create_markup(buttons)
    await callback.message.edit_text("–ö—Ä–∞—Å–∏–≤–æ —Ä–∞–∑–¥–∞—ë—Ç –ø–∞—Å—ã!", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("remove_assist__"))
async def remove_assist_func(callback):
    game_id = int(callback.data.split("__")[1])
    played_at = callback.data.split("__")[2]
    players_in_game = await find_players_with_something(int(game_id), something="assists")
    buttons = [
        (player["name"], f"unassist__{str(player['id'])}__{game_id}__{played_at}") for player in players_in_game
    ]
    buttons.append(("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}"))
    markup = create_markup(buttons, columns=2)
    await callback.message.edit_text("–ö–æ–≥–æ –æ—Ç–º–µ–Ω—è–µ–º?", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("unassist__"))
async def remove_assist_func(callback):
    player_id = int(callback.data.split("__")[1])
    game_id = int(callback.data.split("__")[2])
    played_at = callback.data.split("__")[3]
    await remove_assist(game_id, player_id)
    buttons = [("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}")]
    markup = create_markup(buttons)
    await callback.message.edit_text("–ì–∞–ª—è, –æ—Ç–º–µ–Ω–∞", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("add_autogoal__"))
async def add_autogoal_func(callback):
    game_id = int(callback.data.split("__")[1])
    played_at = callback.data.split("__")[2]
    players_in_game = await find_players_in_game(int(game_id))
    buttons = [
        (player["name"], f"autogoal__{str(player['id'])}__{game_id}__{played_at}") for player in players_in_game
    ]
    buttons.append(("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}"))
    markup = create_markup(buttons, columns=2)
    await callback.message.edit_text("–ö—Ç–æ –∑–∞–±–∏–ª –≤ —Å–≤–æ–∏ –≤–æ—Ä–æ—Ç–∞?", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("autogoal__"))
async def autogoal_func(callback):
    player_id = int(callback.data.split("__")[1])
    game_id = int(callback.data.split("__")[2])
    played_at = callback.data.split("__")[3]
    await add_autogoal(game_id, player_id)
    buttons = [("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}")]
    markup = create_markup(buttons)
    await callback.message.edit_text("–ü–æ–¥—Å—Ç–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É...", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("remove_autogoal__"))
async def remove_autogoal_func(callback):
    game_id = int(callback.data.split("__")[1])
    played_at = callback.data.split("__")[2]
    players_in_game = await find_players_with_something(int(game_id), something="autogoals")
    buttons = [
        (player["name"], f"unautogoal__{str(player['id'])}__{game_id}__{played_at}") for player in players_in_game
    ]
    buttons.append(("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}"))
    markup = create_markup(buttons, columns=2)
    await callback.message.edit_text("–ö–æ–≥–æ –æ—Ç–º–µ–Ω—è–µ–º?", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("unautogoal__"))
async def remove_autogoal_func(callback):
    player_id = int(callback.data.split("__")[1])
    game_id = int(callback.data.split("__")[2])
    played_at = callback.data.split("__")[3]
    await remove_autogoal(game_id, player_id)
    buttons = [("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}")]
    markup = create_markup(buttons)
    await callback.message.edit_text("–ì–∞–ª—è, –æ—Ç–º–µ–Ω–∞", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("results__"))
async def results_func(callback):
    game_id = int(callback.data.split("__")[1])
    played_at = callback.data.split("__")[2]
    msg = await results_of_the_game(game_id)
    buttons = [("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}")]
    markup = create_markup(buttons)
    await callback.message.edit_text(msg, reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("game_delete__"))
async def delete_game_func(callback, state):
    game_id = int(callback.data.split("__")[1])
    played_at = callback.data.split("__")[2]
    buttons = [
        ("–î–∞", f"yes_delete__{game_id}"),
        ("–ù–µ—Ç", f"games__{game_id}__{played_at}")
    ]
    markup = create_markup(buttons)
    await callback.message.edit_text("–£–≤–µ—Ä–µ–Ω? –í–º–µ—Å—Ç–µ —Å –∏–≥—Ä–æ–π —É–¥–∞–ª—è—Ç—Å—è –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–æ–≤", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("point_player__"))
async def point_player_func(callback):
    game_id = int(callback.data.split("__")[1])
    played_at = callback.data.split("__")[2]
    points = int(callback.data.split("__")[3])
    players_in_game = await find_players_in_game(int(game_id))
    buttons = [
        (player["name"], f"add_points__{str(player['id'])}__{game_id}__{played_at}__{points}") for player in players_in_game
    ]
    buttons.append(("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}"))
    markup = create_markup(buttons, columns=2)
    await callback.message.edit_text("–ö—Ç–æ –≤—ã–∏–≥—Ä–∞–ª?", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("more_points_player__"))
async def more_points_player_func(callback):
    game_id = int(callback.data.split("__")[1])
    played_at = callback.data.split("__")[2]
    players_in_game = await find_players_in_game(int(game_id))
    buttons = [
        (player["name"], f"added_points__{str(player['id'])}__{game_id}__{played_at}") for player in players_in_game
    ]
    buttons.append(("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}"))
    markup = create_markup(buttons, columns=2)
    await callback.message.edit_text("–ö—Ç–æ –≤—ã–∏–≥—Ä–∞–ª?", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("added_points__"))
async def added_points(callback):
    player_id = int(callback.data.split("__")[1])
    game_id = int(callback.data.split("__")[2])
    played_at = callback.data.split("__")[3]

    buttons = [(str(points), f"overall_points__{str(player_id)}__{game_id}__{played_at}__{str(points)}") for points in range(21)]
    markup = create_markup(buttons, 4)
    await callback.message.edit_text(f"–°–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º?", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("add_points__"))
async def add_point_player(callback):
    player_id = int(callback.data.split("__")[1])
    game_id = int(callback.data.split("__")[2])
    played_at = callback.data.split("__")[3]
    points = int(callback.data.split("__")[4])
    await add_points(game_id, player_id, points)
    buttons = [("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}")]
    markup = create_markup(buttons)
    await callback.message.edit_text(f"–î–æ–±–∞–≤–∏–ª–∏ {points} {'–æ—á–∫–∞' if points==3 else '–æ—á–∫–æ'}", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("overall_points__"))
async def add_overall_points_player(callback):
    print('tut?')
    player_id = int(callback.data.split("__")[1])
    game_id = int(callback.data.split("__")[2])
    played_at = callback.data.split("__")[3]
    overall_points = int(callback.data.split("__")[4])
    await add_overall_pts(game_id, player_id, overall_points)
    buttons = [("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", f"games__{game_id}__{played_at}")]
    markup = create_markup(buttons)
    await callback.message.edit_text(f"–î–æ–±–∞–≤–∏–ª–∏ {overall_points} –æ—á–∫–æ–≤", reply_markup=markup)


@router_all_games.callback_query(F.data.startswith("yes_delete__"))
async def yes_delete_game_func(callback, state):
    game_id = int(callback.data.split("__")[1])
    await delete_game(game_id)
    buttons = [
        ("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "start"),
    ]
    markup = create_markup(buttons)
    await callback.message.edit_text("–ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞", reply_markup=markup)
