from aiogram import Router, F
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from keyboards.reply.create_markup import create_markup
from states.overall import OverallState
from pg_maker import all_players, change_players_name, my_general_stats


router_all_players = Router()

buttons_back = [
    ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–æ–∫–∞–º", "players"),
    ("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "start"),
]


@router_all_players.message(Command("all_players"))
@router_all_players.callback_query(F.data == "all_players")
async def all_players_func(message):
    if isinstance(message, CallbackQuery):
        message = message.message

    players = await all_players()
    buttons = [(name["name"], f"players__{name['username']}__{name['id']}__{name['name']}") for name in players]
    buttons.extend(buttons_back)
    markup = create_markup(buttons, columns=3)
    try:
        await message.edit_text("–í—Å–µ –∏–≥—Ä–æ–∫–∏", reply_markup=markup)
    except:
        await message.answer("–í—Å–µ –∏–≥—Ä–æ–∫–∏", reply_markup=markup)


@router_all_players.callback_query(F.data.startswith("players__"))
async def player_func(callback):
    username = callback.data.split("__")[1]
    player_id = callback.data.split("__")[2]
    name = callback.data.split("__")[3]
    buttons = [
        ("üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É", f"see_stats__{player_id}__{name}"),
        ("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", f"change_name__{player_id}__{name}"),
        ("üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã", f"delete__{name}"),
        ]
    buttons.extend(buttons_back)
    markup = create_markup(buttons)
    await callback.message.edit_text("–ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=markup)


@router_all_players.callback_query(F.data.startswith("see_stats"))
async def see_stats_func(callback):
    player_id = int(callback.data.split("__")[1])
    name = callback.data.split("__")[2]
    message = callback.message
    his_stats = await my_general_stats(player_id)
    if his_stats["matches_played"] == 0:
        msg = "üî∏ –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π"
    else:
        msg = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {name}*\n\n\n"
            f"ü•Ö –°—ã–≥—Ä–∞–Ω–æ –º–∞—Ç—á–µ–π: {his_stats['matches_played']}\n"
            f"‚öΩ –ó–∞–±–∏—Ç–æ –≥–æ–ª–æ–≤: {his_stats['total_goals']}\n"
            f"ü§ù –°–¥–µ–ª–∞–Ω–æ –∞—Å—Å–∏—Å—Ç–æ–≤: {his_stats['total_assists']}"
        )
    markup = create_markup(buttons_back)
    await message.edit_text(msg, reply_markup=markup, parse_mode="Markdown")


@router_all_players.callback_query(F.data.startswith("change_name"))
async def change_name_func(callback, state):
    player_id = int(callback.data.split("__")[1])
    await state.update_data(player_id=player_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è")
    await state.set_state(OverallState.change_name)


@router_all_players.message(OverallState.change_name)
async def changed_name_func(message, state):
    new_name = message.text.strip()

    data = await state.get_data()
    player_id = data.get("player_id")
    if player_id is None:
        await message.answer("‚ùó –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    await change_players_name(new_name, player_id)
    await message.answer(f"‚úÖ –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ¬´{new_name}¬ª.")
    await state.clear()
