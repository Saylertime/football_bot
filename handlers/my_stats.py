from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery

from keyboards.reply.create_markup import create_markup
from states.overall import OverallState
from utils.calend import MONTHS_GENITIVE
from pg_maker import (
    all_my_games, all_games,
    results_of_the_game, find_player_id,
    my_stats_in_match, my_general_stats
)


router_my_stats = Router()

buttons_back = [
    ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "my_stats"),
    ("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "start"),
]


@router_my_stats.message(Command("stats"))
@router_my_stats.callback_query(F.data == "stats")
async def stats_func(message):
    if isinstance(message, CallbackQuery):
        message = message.message

    buttons = [
        ("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "my_stats"),
        ("üåê –û–±—â–∞—è —Å—Ç–∞—Ç–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è", "general_stats"),
    ]
    markup = create_markup(buttons)
    await message.edit_text("–ß—Ç–æ —Å–º–æ—Ç—Ä–∏–º?", reply_markup=markup)


@router_my_stats.callback_query(F.data.startswith("my_stats"))
async def my_stats_func(callback):
    buttons = [
        ("üìà –°—Ç–∞—Ç–∞ –∑–∞ –º–∞—Ç—á", "match_stats"),
        ("üåê –°—Ç–∞—Ç–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è", "all_time_stats"),
        ("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "start"),
    ]
    markup = create_markup(buttons)
    await callback.message.edit_text("–ß—Ç–æ —Å–º–æ—Ç—Ä–∏–º?", reply_markup=markup)


@router_my_stats.callback_query(F.data.startswith("match_stats"))
async def match_stats_func(callback):
    user = callback.from_user
    message = callback.message
    player_id = await find_player_id(user.username)
    games = await all_my_games(player_id)

    buttons = []
    for game in games:
        dt = game["played_at"]
        label = f"{dt.day:02d} {MONTHS_GENITIVE[dt.month]} {dt.year}"
        buttons.append((label, f"my_games__{game['id']}"))
    buttons.extend([
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "my_stats"),
        ("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "start"),
    ])
    markup = create_markup(buttons, columns=2)
    await message.edit_text("–í—Å–µ –∏–≥—Ä—ã", reply_markup=markup)


@router_my_stats.callback_query(F.data.startswith("my_games__"))
async def me_games_func(callback):
    user = callback.from_user
    message = callback.message
    game_id = int(callback.data.split("__")[1])
    player_id = await find_player_id(user.username)
    stats = await my_stats_in_match(player_id, game_id)
    if not stats:
        await callback.message.answer("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞.")
        return
    msg = (
        f"‚öΩ –ì–æ–ª—ã: {stats['goals']}\n"
        f"ü§ù –ê—Å—Å–∏—Å—Ç—ã: {stats['assists']}\n"
    )
    if stats["autogoals"]:
        msg += f"ü§° –ê–≤—Ç–æ–≥–æ–ª—ã: {stats['autogoals']}"
    markup = create_markup(buttons_back)
    await message.edit_text(msg, reply_markup=markup, parse_mode="Markdown")


@router_my_stats.callback_query(F.data.startswith("all_time_stats"))
async def all_time_stats_func(callback):
    user = callback.from_user
    player_id = await find_player_id(user.username)
    message = callback.message
    my_stats = await my_general_stats(player_id)
    if my_stats["matches_played"] == 0:
        msg = "üî∏ –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π"
    else:
        msg = (
            "üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n\n"
            f"ü•Ö –°—ã–≥—Ä–∞–Ω–æ –º–∞—Ç—á–µ–π: {my_stats['matches_played']}\n"
            f"‚öΩ –ó–∞–±–∏—Ç–æ –≥–æ–ª–æ–≤: {my_stats['total_goals']}\n"
            f"ü§ù –°–¥–µ–ª–∞–Ω–æ –∞—Å—Å–∏—Å—Ç–æ–≤: {my_stats['total_assists']}"
        )
    markup = create_markup(buttons_back)
    await message.edit_text(msg, reply_markup=markup, parse_mode="Markdown")

