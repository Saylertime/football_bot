from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import CallbackQuery
from aiogram_calendar import DialogCalendar, DialogCalendarCallback
from aiogram.fsm.context import FSMContext
from datetime import datetime

from keyboards.reply.create_markup import create_markup
from states.overall import OverallState
from pg_maker import (
    get_all_player_totals_goals,
    get_all_player_totals_assists,
    get_all_player_totals_goals_and_assists,
    get_top_players_by_points
)

router_general_stats = Router()


# ====== –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ======
MAX_TG = 3900  # –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –¥–æ –ª–∏–º–∏—Ç–∞ 4096

def back_markup():
    return create_markup([("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "start")])

def build_stats_messages(results, header: str):
    """–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤ <= MAX_TG —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π."""
    entries = []
    for num, player in enumerate(results, 1):
        if player['games_played'] == 0:
            continue

        username = f"@{player['username']}" if player['username'] else "‚Äî"
        block = (
            f"<b>{num}. {player['name']}</b> ‚Äî {username}\n"
            f"‚öΩ –ì–æ–ª—ã: {player['total_goals']}\n"
            f"ü§ù –ê—Å—Å–∏—Å—Ç—ã: {player['total_assists']}\n"
            f"üèü –°—ã–≥—Ä–∞–Ω–æ –º–∞—Ç—á–µ–π: {player['games_played']}\n"
            f"üèÖ –ù–∞–±—Ä–∞–Ω–æ –æ—á–∫–æ–≤: {player['total_points']}\n"
            f"üèÜ –ù–∞–±—Ä–∞–Ω–æ pts: {player['overall_pts']}\n"
        )
        if player.get('total_autogoals', 0) > 0:
            block += f"ü§° –ê–≤—Ç–æ–≥–æ–ª—ã: {player['total_autogoals']}\n"
        block += "______________ \n\n"
        entries.append(block)

    chunks = []
    current = header
    sep = "‚Äî" * 22 + "\n"
    if entries:
        current += sep

    for block in entries:
        if len(current) + len(block) > MAX_TG:
            chunks.append(current.rstrip())
            current = block
        else:
            current += block

    if current.strip():
        chunks.append(current.rstrip())

    return chunks

async def send_chunks(message, chunks, edit: bool):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —á–∞–Ω–∫–∞–º. –ö–Ω–æ–ø–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º –±–ª–æ–∫–æ–º."""
    if not chunks:
        chunks = ["‚ÑπÔ∏è –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç"]

    if edit:
        # –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        await message.edit_text(chunks[0], parse_mode="HTML")
        # –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        for mid in chunks[1:-1]:
            await message.answer(mid, parse_mode="HTML")
        # –ø–æ—Å–ª–µ–¥–Ω–∏–π ‚Äî —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ù–∞–∑–∞–¥¬ª
        if len(chunks) > 1:
            await message.answer(chunks[-1], reply_markup=back_markup(), parse_mode="HTML")
        else:
            await message.edit_text(chunks[0], reply_markup=back_markup(), parse_mode="HTML")
    else:
        # –æ–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        await message.answer(chunks[0], parse_mode="HTML")
        for mid in chunks[1:-1]:
            await message.answer(mid, parse_mode="HTML")
        if len(chunks) > 1:
            await message.answer(chunks[-1], reply_markup=back_markup(), parse_mode="HTML")
        else:
            # –µ–¥–∏–Ω–∏—á–Ω—ã–π —á–∞–Ω–∫ ‚Äî —Å—Ä–∞–∑—É —Å –∫–Ω–æ–ø–∫–æ–π
            await message.answer(chunks[0], reply_markup=back_markup(), parse_mode="HTML")


# ---------- –ú–ï–ù–Æ / –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ----------
@router_general_stats.message(Command("general_stats"))
@router_general_stats.callback_query(F.data.startswith("general_stats_"))
async def general_stats_func(event, state: FSMContext):
    if isinstance(event, CallbackQuery):
        data = event.data
        message = event.message
        edit = True
    else:
        data = None
        message = event
        edit = False

    # –ú–µ–Ω—é
    if data is None:
        kb = create_markup([
            ("‚öΩ –ì–æ–ª—ã (–≤—Å—ë –≤—Ä–µ–º—è)", "general_stats_goal"),
            ("ü§ù –ê—Å—Å–∏—Å—Ç—ã (–≤—Å—ë –≤—Ä–µ–º—è)", "general_stats_assist"),
            ("‚öΩ+ü§ù –ì–æ–ª+–ø–∞—Å (–≤—Å—ë –≤—Ä–µ–º—è)", "general_stats_goal_and_assist"),
            ("üèÜ PTS (–≤—Å—ë –≤—Ä–µ–º—è)", "general_stats_overall_pts"),                # –¥–æ–±–∞–≤–∏–ª
            ("üìÖ ‚öΩ –ì–æ–ª—ã –∑–∞ –ø–µ—Ä–∏–æ–¥", "general_stats_goal_period"),
            ("üìÖ ü§ù –ê—Å—Å–∏—Å—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥", "general_stats_assist_period"),
            ("üìÖ ‚öΩ+ü§ù –ì–æ–ª+–ø–∞—Å –∑–∞ –ø–µ—Ä–∏–æ–¥", "general_stats_goal_and_assist_period"),
            ("üìÖ üèÜ PTS –∑–∞ –ø–µ—Ä–∏–æ–¥", "see_overall_pts_period"),                  # –¥–æ–±–∞–≤–∏–ª
            ("üìÖ üèÖ –û—á–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥", "general_stats_points_period"),
            ("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "start"),
        ], columns=2)
        await message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)
        return

    # –í–µ—Ç–∫–∏ "–∑–∞ –ø–µ—Ä–∏–æ–¥" –∏–∑ general_stats_*
    if data.endswith("_period"):
        stats_type = data.removesuffix("_period")  # general_stats_goal / _assist / _goal_and_assist / _points / _overall_pts (–µ—Å–ª–∏ —Å–¥–µ–ª–∞–µ—à—å –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ)
        await state.set_state(OverallState.calendar)
        await state.update_data(stage="start", stats_type=stats_type)
        await message.answer(
            "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
            reply_markup=await DialogCalendar().start_calendar(
                year=datetime.now().year, month=datetime.now().month
            ),
        )
        return

    # ¬´–≤—Å—ë –≤—Ä–µ–º—è¬ª
    if data == "general_stats_goal":
        results = await get_all_player_totals_goals()
        header = "<b>–¢–ê–ë–õ–ò–¶–ê –õ–£–ß–®–ò–• –ü–û –ì–û–õ–ê–ú</b>\n\n"
    elif data == "general_stats_assist":
        results = await get_all_player_totals_assists()
        header = "<b>–¢–ê–ë–õ–ò–¶–ê –õ–£–ß–®–ò–• –ü–û –ê–°–°–ò–°–¢–ê–ú</b>\n\n"
    elif data == "general_stats_goal_and_assist":
        results = await get_all_player_totals_goals_and_assists()
        header = "<b>–¢–ê–ë–õ–ò–¶–ê –õ–£–ß–®–ò–• –ü–û –ì–û–õ+–ü–ê–°</b>\n\n"
    elif data == "general_stats_points":
        results = await get_top_players_by_points()
        header = "<b>–¢–ê–ë–õ–ò–¶–ê –õ–£–ß–®–ò–• –ü–û –û–ß–ö–ê–ú</–±>\n\n"
    elif data == "general_stats_overall_pts":
        results = await get_top_players_by_points(overall_pts=True)
        header = "<b>–¢–ê–ë–õ–ò–¶–ê –õ–£–ß–®–ò–• –ü–û PTS</b>\n\n"
    else:
        kb = create_markup([("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "start")])
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=kb)
        return

    chunks = build_stats_messages(results, header)
    await send_chunks(message, chunks, edit)


@router_general_stats.callback_query(F.data.in_({
    "see_goals_period",
    "see_assists_period",
    "see_goals_and_assists_period",
    "see_points_period",
    "see_overall_pts_period",
}))
async def start_period_from_stats_menu(call: CallbackQuery, state: FSMContext):
    mapping = {
        "see_goals_period": "general_stats_goal",
        "see_assists_period": "general_stats_assist",
        "see_goals_and_assists_period": "general_stats_goal_and_assist",
        "see_points_period": "general_stats_points",
        "see_overall_pts_period": "general_stats_overall_pts",
    }
    stats_type = mapping[call.data]
    await state.set_state(OverallState.calendar)
    await state.update_data(stage="start", stats_type=stats_type)
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
        reply_markup=await DialogCalendar().start_calendar(
            year=datetime.now().year, month=datetime.now().month
        ),
    )


async def end_period(call_or_cbq, state: FSMContext):
    await state.update_data(stage="end")
    target_msg = call_or_cbq.message if isinstance(call_or_cbq, CallbackQuery) else call_or_cbq
    await target_msg.answer(
        "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
        reply_markup=await DialogCalendar().start_calendar(
            year=datetime.now().year, month=datetime.now().month
        ),
    )


@router_general_stats.callback_query(StateFilter(OverallState.calendar), DialogCalendarCallback.filter())
async def process_dialog_calendar(callback_query: CallbackQuery, callback_data, state: FSMContext):
    selected, date = await DialogCalendar().process_selection(callback_query, callback_data)
    if not selected:
        return

    data = await state.get_data()
    stage = data.get("stage")

    if stage == "start":
        await state.update_data(start=date.strftime("%Y-%m-%d"))
        await end_period(callback_query, state)
        return

    if stage == "end":
        await state.update_data(end=date.strftime("%Y-%m-%d"))
        data = await state.get_data()
        stats_type = data.get("stats_type")  # 'general_stats_goal' / '..._assist' / '..._goal_and_assist' / 'general_stats_points' / 'general_stats_overall_pts'

        start_date = datetime.strptime(data["start"], "%Y-%m-%d").date()
        end_date   = datetime.strptime(data["end"], "%Y-%m-%d").date()

        # –í—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–µ—Ä–∏–æ–¥–æ–º
        if stats_type == "general_stats_goal":
            results = await get_all_player_totals_goals(start_date, end_date)
            header = (f"<b>–¢–ê–ë–õ–ò–¶–ê –õ–£–ß–®–ò–• –ü–û –ì–û–õ–ê–ú</b>\n"
                      f"üìÖ —Å {start_date.strftime('%d %B')} –ø–æ {end_date.strftime('%d %B')}\n\n")
        elif stats_type == "general_stats_assist":
            results = await get_all_player_totals_assists(start_date, end_date)
            header = (f"<b>–¢–ê–ë–õ–ò–¶–ê –õ–£–ß–®–ò–• –ü–û –ê–°–°–ò–°–¢–ê–ú</b>\n"
                      f"üìÖ —Å {start_date.strftime('%d %B')} –ø–æ {end_date.strftime('%d %B')}\n\n")
        elif stats_type == "general_stats_points":
            results = await get_top_players_by_points(start_date, end_date)
            header = (f"<b>–¢–ê–ë–õ–ò–¶–ê –õ–£–ß–®–ò–• –ü–û –û–ß–ö–ê–ú</b>\n"
                      f"üìÖ —Å {start_date.strftime('%d %B')} –ø–æ {end_date.strftime('%d %B')}\n\n")
        elif stats_type == "general_stats_overall_pts":
            results = await get_top_players_by_points(start_date, end_date, overall_pts=True)
            header = (f"<b>–¢–ê–ë–õ–ò–¶–ê –õ–£–ß–®–ò–• –ü–û PTS</b>\n"
                      f"üìÖ —Å {start_date.strftime('%d %B')} –ø–æ {end_date.strftime('%d %B')}\n\n")
        else:
            results = await get_all_player_totals_goals_and_assists(start_date, end_date)
            header = (f"<b>–¢–ê–ë–õ–ò–¶–ê –õ–£–ß–®–ò–• –ü–û –ì–û–õ+–ü–ê–°</b>\n"
                      f"üìÖ —Å {start_date.strftime('%d %B')} –ø–æ {end_date.strftime('%d %B')}\n\n")

        chunks = build_stats_messages(results, header)
        await state.clear()
        # —Ç—É—Ç –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è ‚Äî –∑–Ω–∞—á–∏—Ç edit=True
        await send_chunks(callback_query.message, chunks, edit=True)