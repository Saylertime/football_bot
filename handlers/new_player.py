from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery

from keyboards.reply.create_markup import create_markup
from states.overall import OverallState
from pg_maker import add_player


router_new_player = Router()


@router_new_player.message(Command("new_player"))
@router_new_player.callback_query(F.data == "new_player")
async def new_player(message, state):
    if isinstance(message, CallbackQuery):
        message = message.message

    await message.edit_text(
        "–í–≤–µ–¥–∏ –∏–º—è –∏ –Ω–∏–∫ –∞–≤—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å –ø—Ä–æ–±–µ–ª–æ–º. –ë–ï–ó @. –ü—Ä–∏–º–µ—Ä: \n\n"
        "–ê–ª–µ–∫—Å–µ–π –ì–ª–∏–Ω–∫–∏–Ω, saylertime"
    )
    await state.set_state(OverallState.new_player)


@router_new_player.message(OverallState.new_player)
async def add_player_to_db(message, state):
    try:
        name, username = message.text.split(", ")
        await add_player(name, username)
        buttons = [
            ("üë§ –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ–≥–æ", "new_player"),
            ("üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤", "all_players"),
            ("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "start"),
        ]
        markup = create_markup(buttons)

        await message.answer(f"{name} –¥–æ–±–∞–≤–ª–µ–Ω!\n\n", reply_markup=markup)
    except:
        buttons = [
            ("–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", "new_player"),
            ("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "start"),
        ]
        markup = create_markup(buttons)
        await message.answer(f"–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å", reply_markup=markup)
    await state.clear()
